#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CKernelCAD wrapper class

class CKernelCAD : public CWnd
{
protected:
	DECLARE_DYNCREATE(CKernelCAD)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x1BF74BAF, 0xDAB3, 0x4A68, { 0xA6, 0xEC, 0x40, 0x9E, 0x7A, 0xAA, 0x24, 0xBB } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:
enum
{
    eMaxParamName = 30,
    eMaxClassName = 50,
    eMaxPropName = 30
}EDIConst;
enum
{
    eDIMovePan = 1,
    eDIMoveZoom = 2,
    eDIMoveRotate = 4
}EDIMove;
enum
{
    eViewModeView = 1,
    eViewModeModify = 2
}EViewMode;
enum
{
    eHighLightPoint = 128,
    eHighLightLine = 256,
    eHighLightSurface = 512
}EHighLight;
enum
{
    eEnablePan = 1,
    eEnableZoom = 2,
    eEnableRotate = 4,
    eEnableHighLightPoint = 128,
    eEnableHighLightLine = 256,
    eEnableHighLightSurface = 512,
    eEnableTransparency = 1024,
    eEnablePerspectiveProjection = 2048
}EEnableBit;
enum
{
    eViewType2D = 2,
    eViewType3D = 3
}EViewType;
enum
{
    eSegmTypeLine = 1,
    eSegmTypeArc = 2
}ESegmentType;
enum
{
    ePatchTypeCurvature = 1,
    ePatchTypeRadius = 2
}EPatchType;
enum
{
    eCoordTypeCartesian = 1,
    eCoordTypePolar = 2
}ECoordinatesType;
enum
{
    eObjTypeNULL = 0,
    eObjTypeLine = 1,
    eObjTypeMeshSection = 2,
    eObjType3DSGenerator = 3,
    eObjTypeSORGenerator = 4,
    eObjTypeModelGenerator = 5,
    eObjTypeFrame = 6,
    eObjType3DPoint = 7,
    eObjTypePointSet = 8,
    eObjTypeLineStrip = 9,
    eObjTypePlane = 10,
    eObjTypeBox = 11,
    eObjTypeArc = 12,
    eObjTypeFreeFormCurve = 13,
    eObjTypeArcSplineCurve = 14,
    eObjTypePipeSection = 15,
    eObjTypeNumericArray = 16,
    eObjTypeCircle = 17
}EObjectType;
enum
{
    ePoints = 0,
    eLines = 1,
    eLineLoop = 2,
    eLineStrip = 3,
    eTriangles = 4,
    eTriangleStrip = 5,
    eTriangleFan = 6,
    eQuads = 7,
    eQuadStrip = 8,
    ePolygon = 9,
    eDrawPrimitiveUnknown = 10
}EDrawPrimitive;
enum
{
    eDataTypeNULL = 0,
    eDataTypeDouble = 1,
    eDataTypeSingle = 2,
    eDataTypeLong = 3,
    eDataTypeShort = 4,
    eDataTypeString = 5
}EDataType;
enum
{
    eKCTypeNULL = 0,
    eKCTypeDouble = 1,
    eKCTypeSingle = 2,
    eKCTypeLong = 3,
    eKCTypeShort = 4,
    eKCTypeString = 5,
    eKCTypeBool = 6
}EKCType;
enum
{
    eSymmTypeNULL = 0,
    eSymmTypeAxial = 1,
    eSymmTypeMirror = 2,
    eSymmTypeTranslation = 3
}ESymmType;
enum
{
    eEventMouseHover = 0,
    eEventClientDraw = 1,
    eEventCollision = 2
}EDIEvent;
enum
{
    eItemTypeSection = 0,
    eItemTypeLabel = 1,
    eItemTypeViewPoint = 2
}EItemType;
enum
{
    eModelViewFrameGlobal = 0,
    eModelViewFrameEye = 1
}EModelViewFrame;
enum
{
    eModelEntityUnknown = 0,
    eModelEntityObject = 1,
    eModelEntityModel = 2
}EModelEntity;
enum
{
    eStlAnalysAuto = 0,
    eStlAnalysPerform = 1,
    eStlAnalysSkip = 2
}ESTLAnalysis;
enum
{
    eViewResetAll = 0,
    eViewResetVolume = 1
}EViewReset;
enum
{
    eCADFormatMDG = 0,
    eCADFormatVRML = 1,
    eCADFormatSTL = 2
}ECADFormat;
enum
{
    eModifResInvalid = -1,
    eModifResNoChange = 0,
    eModifResModified = 1
}EModifResult;


// Operations
public:

// _DKernelCAD

// Functions
//

	BOOL SaveAs(LPCTSTR strFilePath)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, strFilePath);
		return result;
	}
	BOOL Save()
	{
		BOOL result;
		InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	LPUNKNOWN GetModel()
	{
		LPUNKNOWN result;
		InvokeHelper(0x6, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	IModel_DGPtr GetModelDG()
	{
		LPUNKNOWN iUnkn = GetModel();
		IModel_DGPtr iModel(iUnkn);
		iUnkn->Release();
		return iModel;
	}
	BOOL UpdateSurface()
	{
		BOOL result;
		InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	LPUNKNOWN GetView()
	{
		LPUNKNOWN result;
		InvokeHelper(0xa, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, NULL);
		return result;
	}
	void RequestClientDraw(BOOL request)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, request);
	}
	void RequestEvent(long event, BOOL request)
	{
		static BYTE parms[] = VTS_I4 VTS_BOOL ;
		InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, parms, event, request);
	}
	void UpdateView()
	{
		InvokeHelper(0xd, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}

// Properties
//

CString GetModelPath()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}
void SetModelPath(CString propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}
BOOL GetShowGlobalAxes()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}
void SetShowGlobalAxes(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}
BOOL GetShowLocalAxes()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}
void SetShowLocalAxes(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}
long GetDIBackColor()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}
void SetDIBackColor(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}
BOOL GetRenderSolid()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}
void SetRenderSolid(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}


};
